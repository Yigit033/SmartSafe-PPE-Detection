#!/usr/bin/env python3
"""
SmartSafe AI Production - Ger√ßek Kamera Kurulum Scripti
Production camera setup for https://smartsafeai.onrender.com/
"""

import requests
import json
import socket
import sys
from typing import Dict, List, Optional

class ProductionCameraSetup:
    """Production ortamƒ± i√ßin kamera kurulum yardƒ±mcƒ±sƒ±"""
    
    def __init__(self):
        self.api_base = "https://smartsafeai.onrender.com/api"
        self.web_base = "https://smartsafeai.onrender.com"
        self.session = requests.Session()
        self.company_id = None
        self.auth_token = None
    
    def print_header(self, title: str):
        """Ba≈ülƒ±k yazdƒ±r"""
        print("\n" + "="*60)
        print(f"üåê {title}")
        print("="*60)
    
    def print_step(self, step_num: int, description: str):
        """Adƒ±m bilgisi yazdƒ±r"""
        print(f"\nüìã Adƒ±m {step_num}: {description}")
        print("-" * 50)
    
    def test_internet_connection(self) -> bool:
        """ƒ∞nternet baƒülantƒ±sƒ±nƒ± test et"""
        try:
            response = requests.get(self.web_base, timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def test_camera_accessibility(self, ip: str, port: int) -> Dict:
        """Kamera eri≈üilebilirlik testi"""
        result = {
            'accessible': False,
            'public_ip': None,
            'port_open': False,
            'recommendation': ''
        }
        
        try:
            # Local IP kontrol√º
            if ip.startswith('192.168.') or ip.startswith('10.') or ip.startswith('172.'):
                result['recommendation'] = 'VPN veya Port Forwarding gerekli'
                
                # Public IP'yi bul
                try:
                    pub_ip_response = requests.get('https://api.ipify.org', timeout=5)
                    result['public_ip'] = pub_ip_response.text
                except:
                    result['public_ip'] = 'Bulunamadƒ±'
            else:
                # Public IP testi
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                port_result = sock.connect_ex((ip, port))
                sock.close()
                
                result['port_open'] = port_result == 0
                result['accessible'] = port_result == 0
                
                if not result['accessible']:
                    result['recommendation'] = 'Port forwarding veya g√ºvenlik duvarƒ± ayarlarƒ± kontrol edin'
        
        except Exception as e:
            result['recommendation'] = f'Baƒülantƒ± hatasƒ±: {str(e)}'
        
        return result
    
    def get_company_info(self) -> Optional[str]:
        """≈ûirket bilgilerini al"""
        self.print_step(1, "≈ûirket Bilgileri")
        
        print("üè¢ SmartSafe AI Production ortamƒ±nda ≈üirket bilgilerinizi girin:")
        
        company_code = input("≈ûirket kodu (√∂rnek: ACME_CONSTRUCTION): ").strip()
        if not company_code:
            print("‚ùå ≈ûirket kodu gerekli!")
            return None
        
        print(f"\n‚úÖ ≈ûirket kodu: {company_code}")
        print(f"üîó Giri≈ü URL'si: {self.web_base}/")
        print(f"üìã ≈ûirket kaydƒ± yapmak i√ßin: {self.web_base}/register")
        
        return company_code
    
    def get_camera_info(self) -> Dict:
        """Kamera bilgilerini al"""
        self.print_step(2, "Kamera Bilgileri")
        
        print("üìπ Production ortamƒ±nda kullanacaƒüƒ±nƒ±z kamera bilgilerini girin:")
        
        camera_info = {}
        camera_info['name'] = input("Kamera adƒ± (√∂rnek: √úretim Alanƒ± Kamera 1): ").strip() or "Production Camera 1"
        camera_info['location'] = input("Konum (√∂rnek: Ana √úretim Alanƒ±): ").strip() or "Production Floor"
        
        # IP adresi ve port
        camera_info['ip_address'] = input("IP adresi (√∂rnek: 192.168.1.190 veya PUBLIC_IP): ").strip()
        camera_info['port'] = int(input("Port (√∂rnek: 8080): ").strip() or "8080")
        
        # Kimlik doƒürulama
        camera_info['username'] = input("Kullanƒ±cƒ± adƒ± (bo≈ü bƒ±rakabilirsiniz): ").strip()
        camera_info['password'] = input("Parola (bo≈ü bƒ±rakabilirsiniz): ").strip()
        
        # Protokol
        protocol_choice = input("Protokol (1: HTTP, 2: HTTPS, 3: RTSP): ").strip()
        protocol_map = {'1': 'http', '2': 'https', '3': 'rtsp'}
        camera_info['protocol'] = protocol_map.get(protocol_choice, 'http')
        
        # Stream path
        camera_info['stream_path'] = input("Stream yolu (√∂rnek: /video): ").strip() or "/video"
        
        return camera_info
    
    def analyze_network_setup(self, camera_info: Dict):
        """Aƒü kurulumunu analiz et"""
        self.print_step(3, "Aƒü Kurulumu Analizi")
        
        ip = camera_info['ip_address']
        port = camera_info['port']
        
        print(f"üîç Kamera eri≈üilebilirlik analizi:")
        print(f"   IP: {ip}")
        print(f"   Port: {port}")
        
        # Eri≈üilebilirlik testi
        access_result = self.test_camera_accessibility(ip, port)
        
        if ip.startswith('192.168.') or ip.startswith('10.') or ip.startswith('172.'):
            print(f"\n‚ö†Ô∏è  LOCAL IP ADRESI TESPƒ∞T EDƒ∞LDƒ∞!")
            print(f"   Bu kamera local aƒüda (≈üirket i√ßi)")
            print(f"   Public IP: {access_result['public_ip']}")
            print(f"\nüîß Production i√ßin √ß√∂z√ºm se√ßenekleri:")
            print(f"   1. üåê VPN Baƒülantƒ±sƒ± (√ñnerilen)")
            print(f"   2. üîÄ Port Forwarding")
            print(f"   3. ‚òÅÔ∏è  Cloud Kamera Servisi")
            
            self.show_setup_recommendations(camera_info, access_result)
        else:
            print(f"\n‚úÖ PUBLIC IP ADRESI")
            if access_result['accessible']:
                print(f"   Kamera eri≈üilebilir!")
            else:
                print(f"   ‚ùå Kamera eri≈üilemiyor")
                print(f"   √ñneri: {access_result['recommendation']}")
    
    def show_setup_recommendations(self, camera_info: Dict, access_result: Dict):
        """Kurulum √∂nerilerini g√∂ster"""
        print(f"\nüí° DETAYLI KURULUM REHBERƒ∞:")
        
        # 1. VPN √á√∂z√ºm√º
        print(f"\n1Ô∏è‚É£ VPN √á√∂z√ºm√º (√ñnerilen):")
        print(f"   ‚Ä¢ ≈ûirket aƒüƒ±nƒ±zda VPN sunucusu kurun")
        print(f"   ‚Ä¢ SmartSafe AI sunucusuna VPN eri≈üimi verin")
        print(f"   ‚Ä¢ Kameralar VPN √ºzerinden eri≈üilebilir olacak")
        print(f"   ‚Ä¢ G√ºvenli ve √∂l√ßeklenebilir")
        
        # 2. Port Forwarding
        print(f"\n2Ô∏è‚É£ Port Forwarding (Basit):")
        print(f"   ‚Ä¢ Router ayarlarƒ±nda port forwarding aktif edin")
        print(f"   ‚Ä¢ Kural: {camera_info['port']} ‚Üí {camera_info['ip_address']}:{camera_info['port']}")
        print(f"   ‚Ä¢ Production'da IP: {access_result['public_ip']}")
        print(f"   ‚Ä¢ Port: {camera_info['port']}")
        
        # 3. Cloud Servis
        print(f"\n3Ô∏è‚É£ Cloud Kamera Servisi:")
        print(f"   ‚Ä¢ Kameranƒ±zƒ±n cloud desteƒüi var mƒ± kontrol edin")
        print(f"   ‚Ä¢ Cloud URL'si kullanƒ±n")
        print(f"   ‚Ä¢ √ñrnek: https://camera.company.com/stream")
    
    def generate_production_config(self, company_code: str, camera_info: Dict) -> Dict:
        """Production konfig√ºrasyonu olu≈ütur"""
        self.print_step(4, "Production Konfig√ºrasyonu")
        
        # Kamera URL'si olu≈ütur
        if camera_info['protocol'] == 'rtsp':
            if camera_info['username'] and camera_info['password']:
                camera_url = f"rtsp://{camera_info['username']}:{camera_info['password']}@{camera_info['ip_address']}:{camera_info['port']}{camera_info['stream_path']}"
            else:
                camera_url = f"rtsp://{camera_info['ip_address']}:{camera_info['port']}{camera_info['stream_path']}"
        else:
            camera_url = f"{camera_info['protocol']}://{camera_info['ip_address']}:{camera_info['port']}{camera_info['stream_path']}"
        
        production_config = {
            "company_code": company_code,
            "camera": {
                "name": camera_info['name'],
                "location": camera_info['location'],
                "ip_address": camera_info['ip_address'],
                "port": camera_info['port'],
                "username": camera_info['username'],
                "password": camera_info['password'],
                "protocol": camera_info['protocol'],
                "stream_path": camera_info['stream_path'],
                "camera_url": camera_url,
                "auth_type": "basic" if camera_info['username'] else "none"
            },
            "production_settings": {
                "api_endpoint": self.api_base,
                "web_dashboard": self.web_base,
                "resolution": "1280x720",
                "fps": 25,
                "quality": 80
            }
        }
        
        # Konfig√ºrasyonu dosyaya kaydet
        config_file = f"production_camera_config_{company_code}.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(production_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Production konfig√ºrasyonu olu≈üturuldu!")
        print(f"   Dosya: {config_file}")
        print(f"   Kamera URL: {camera_url}")
        
        return production_config
    
    def show_next_steps(self, config: Dict):
        """Sonraki adƒ±mlarƒ± g√∂ster"""
        self.print_step(5, "Sonraki Adƒ±mlar")
        
        print(f"üéØ Production ortamƒ±nda devam etmek i√ßin:")
        
        print(f"\n1Ô∏è‚É£ ≈ûirket Kaydƒ±:")
        print(f"   ‚Ä¢ {self.web_base}/ adresine gidin")
        print(f"   ‚Ä¢ '≈ûirket Kaydƒ±' yapƒ±n")
        print(f"   ‚Ä¢ ≈ûirket kodu: {config['company_code']}")
        
        print(f"\n2Ô∏è‚É£ Kamera Ekleme:")
        print(f"   ‚Ä¢ Dashboard'da 'Kamera Ekle' butonuna tƒ±klayƒ±n")
        print(f"   ‚Ä¢ Kamera bilgilerini girin:")
        print(f"     - Adƒ±: {config['camera']['name']}")
        print(f"     - IP: {config['camera']['ip_address']}")
        print(f"     - Port: {config['camera']['port']}")
        print(f"     - Protokol: {config['camera']['protocol']}")
        
        print(f"\n3Ô∏è‚É£ Kamera Testi:")
        print(f"   ‚Ä¢ 'Kamera Testi' butonuna tƒ±klayƒ±n")
        print(f"   ‚Ä¢ Baƒülantƒ± durumunu kontrol edin")
        print(f"   ‚Ä¢ Ba≈üarƒ±lƒ± ise 'Kamera Ekle' butonuna tƒ±klayƒ±n")
        
        print(f"\n4Ô∏è‚É£ PPE Tespit:")
        print(f"   ‚Ä¢ Kamera eklendikten sonra PPE tespit otomatik ba≈ülar")
        print(f"   ‚Ä¢ Dashboard'da canlƒ± sonu√ßlarƒ± g√∂r√ºnt√ºleyin")
        print(f"   ‚Ä¢ Raporlarƒ± ve istatistikleri takip edin")
    
    def run(self):
        """Ana √ßalƒ±≈ütƒ±rma fonksiyonu"""
        self.print_header("SmartSafe AI Production - Kamera Kurulum Rehberi")
        
        print("üéØ Bu script, ger√ßek kameralarƒ±nƒ±zƒ± SmartSafe AI Production ortamƒ±na")
        print("   baƒülamak i√ßin gerekli bilgileri toplar ve konfig√ºrasyon olu≈üturur.")
        
        print(f"\nüåê Production URL: {self.web_base}")
        print(f"üìû Destek: yigittilaver2000@gmail.com")
        
        # ƒ∞nternet baƒülantƒ±sƒ± kontrol√º
        if not self.test_internet_connection():
            print("\n‚ùå ƒ∞nternet baƒülantƒ±sƒ± yok veya SmartSafe AI eri≈üilemiyor!")
            print(f"   L√ºtfen baƒülantƒ±nƒ±zƒ± kontrol edin: {self.web_base}")
            return
        
        print(f"\n‚úÖ SmartSafe AI Production sistemi eri≈üilebilir")
        
        # Devam etmek istiyor mu?
        response = input("\nDevam etmek istiyor musunuz? (E/h): ").strip().lower()
        if response not in ['e', 'evet', 'y', 'yes']:
            print("ƒ∞≈ülem iptal edildi.")
            return
        
        try:
            # ≈ûirket bilgileri
            company_code = self.get_company_info()
            if not company_code:
                return
            
            # Kamera bilgileri
            camera_info = self.get_camera_info()
            
            # Aƒü analizi
            self.analyze_network_setup(camera_info)
            
            # Production konfig√ºrasyonu
            config = self.generate_production_config(company_code, camera_info)
            
            # Sonraki adƒ±mlar
            self.show_next_steps(config)
            
            print(f"\nüéâ Kurulum hazƒ±rlƒ±ƒüƒ± tamamlandƒ±!")
            print(f"   Konfig√ºrasyon dosyasƒ±: production_camera_config_{company_code}.json")
            print(f"   Web dashboard: {self.web_base}/")
            
        except KeyboardInterrupt:
            print(f"\n\nüõë ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan iptal edildi")
        except Exception as e:
            print(f"\n‚ùå Hata: {e}")
            print(f"   L√ºtfen destek ile ileti≈üime ge√ßin: yigittilaver2000@gmail.com")

def main():
    """Ana fonksiyon"""
    setup = ProductionCameraSetup()
    setup.run()

if __name__ == "__main__":
    main() 