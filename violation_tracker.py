"""
SmartSafe AI - Violation Tracker System
Event-based intelligent violation tracking with person identification
"""

import time
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from collections import defaultdict
import hashlib

logger = logging.getLogger(__name__)


class ViolationTracker:
    """
    Akƒ±llƒ± ihlal takip sistemi
    - Event-based: Sadece ihlal ba≈üladƒ±ƒüƒ±nda ve bittiƒüinde kayƒ±t
    - Person tracking: Ki≈üi bazlƒ± ihlal takibi
    - Cooldown: Aynƒ± ihlal tekrar sayƒ±lmaz (60 saniye)
    """
    
    def __init__(self, cooldown_period: int = 60):
        """
        Args:
            cooldown_period: ƒ∞hlal bitmi≈ü sayƒ±lmasƒ± i√ßin gereken s√ºre (saniye)
        """
        self.cooldown_period = cooldown_period
        
        # Aktif ihlaller: {camera_id: {person_hash: {violation_type: start_time}}}
        self.active_violations: Dict[str, Dict[str, Dict[str, float]]] = defaultdict(lambda: defaultdict(dict))
        
        # ƒ∞hlal ge√ßmi≈üi (memory cache): {event_id: event_data}
        self.violation_history: Dict[str, Dict] = {}
        
        # Son kontrol zamanƒ±
        self.last_cleanup_time = time.time()
        
        logger.info("‚úÖ ViolationTracker initialized with cooldown: %d seconds", cooldown_period)
    
    def generate_person_hash(self, person_bbox: List[float], camera_id: str) -> str:
        """
        Ki≈üi i√ßin unique hash olu≈ütur (bbox konumuna g√∂re)
        Gelecekte y√ºz tanƒ±ma ile deƒüi≈ütirilecek
        
        Args:
            person_bbox: [x1, y1, x2, y2]
            camera_id: Kamera ID
            
        Returns:
            Person hash (√∂rn: "PERSON_ABC123")
        """
        # Bbox merkez noktasƒ±
        center_x = (person_bbox[0] + person_bbox[2]) / 2
        center_y = (person_bbox[1] + person_bbox[3]) / 2
        
        # Hash olu≈ütur (kamera + konum)
        hash_input = f"{camera_id}_{int(center_x/50)}_{int(center_y/50)}"
        hash_value = hashlib.md5(hash_input.encode()).hexdigest()[:8].upper()
        
        return f"PERSON_{hash_value}"
    
    def process_detection(
        self, 
        camera_id: str, 
        company_id: str,
        person_bbox: List[float], 
        violations: List[str],
        frame_snapshot: Optional[bytes] = None
    ) -> Tuple[List[Dict], List[Dict]]:
        """
        Detection sonucunu i≈üle ve yeni/biten ihlalleri tespit et
        
        Args:
            camera_id: Kamera ID
            company_id: ≈ûirket ID
            person_bbox: Ki≈üi bounding box
            violations: ƒ∞hlal listesi ['Baret eksik', 'Yelek eksik']
            frame_snapshot: Frame g√∂r√ºnt√ºs√º (opsiyonel)
            
        Returns:
            (new_violations, ended_violations)
        """
        person_id = self.generate_person_hash(person_bbox, camera_id)
        current_time = time.time()
        
        new_violations = []
        ended_violations = []
        
        # Violation type mapping (T√ºrk√ße -> ƒ∞ngilizce)
        violation_map = {
            'Baret eksik': 'no_helmet',
            'Yelek eksik': 'no_vest',
            'G√ºvenlik ayakkabƒ±sƒ± eksik': 'no_shoes'
        }
        
        # Mevcut ihlalleri normalize et
        current_violations = set()
        for v in violations:
            violation_type = violation_map.get(v, v.lower().replace(' ', '_'))
            current_violations.add(violation_type)
        
        # Kamera i√ßin aktif ihlalleri al
        camera_violations = self.active_violations[camera_id]
        person_violations = camera_violations[person_id]
        
        # YENƒ∞ ƒ∞HLALLERƒ∞ KONTROL ET
        for violation_type in current_violations:
            if violation_type not in person_violations:
                # ‚úÖ YENƒ∞ ƒ∞HLAL BA≈ûLADI
                event_id = f"VIO_{camera_id}_{person_id}_{violation_type}_{int(current_time)}"
                
                event_data = {
                    'event_id': event_id,
                    'company_id': company_id,
                    'camera_id': camera_id,
                    'person_id': person_id,
                    'violation_type': violation_type,
                    'start_time': current_time,
                    'start_timestamp': datetime.fromtimestamp(current_time).isoformat(),
                    'person_bbox': person_bbox,
                    'status': 'active',
                    'severity': self._calculate_severity(violation_type)
                }
                
                person_violations[violation_type] = current_time
                self.violation_history[event_id] = event_data
                new_violations.append(event_data)
                
                logger.info(f"üö® NEW VIOLATION: {violation_type} for {person_id} on {camera_id}")
        
        # Bƒ∞TEN ƒ∞HLALLERƒ∞ KONTROL ET
        for violation_type in list(person_violations.keys()):
            if violation_type not in current_violations:
                # ‚úÖ ƒ∞HLAL Bƒ∞TTƒ∞
                start_time = person_violations[violation_type]
                duration = current_time - start_time
                
                # Event ID'yi bul
                event_id = None
                for eid, event in self.violation_history.items():
                    if (event['person_id'] == person_id and 
                        event['violation_type'] == violation_type and
                        event['status'] == 'active'):
                        event_id = eid
                        break
                
                if event_id:
                    event_data = self.violation_history[event_id]
                    event_data['end_time'] = current_time
                    event_data['end_timestamp'] = datetime.fromtimestamp(current_time).isoformat()
                    event_data['duration_seconds'] = int(duration)
                    event_data['status'] = 'resolved'
                    
                    ended_violations.append(event_data)
                    logger.info(f"‚úÖ VIOLATION RESOLVED: {violation_type} for {person_id} (duration: {int(duration)}s)")
                
                del person_violations[violation_type]
        
        # Periyodik cleanup (her 60 saniyede bir)
        if current_time - self.last_cleanup_time > 60:
            self._cleanup_stale_violations()
            self.last_cleanup_time = current_time
        
        return new_violations, ended_violations
    
    def _cleanup_stale_violations(self):
        """Uzun s√ºredir g√ºncellenmemi≈ü ihlalleri temizle"""
        current_time = time.time()
        cleanup_count = 0
        
        for camera_id in list(self.active_violations.keys()):
            for person_id in list(self.active_violations[camera_id].keys()):
                person_violations = self.active_violations[camera_id][person_id]
                
                for violation_type in list(person_violations.keys()):
                    start_time = person_violations[violation_type]
                    
                    # Cooldown s√ºresinden uzun s√ºredir g√ºncellenmemi≈ü
                    if current_time - start_time > self.cooldown_period:
                        # ƒ∞hlali bitmi≈ü say
                        duration = current_time - start_time
                        
                        # Event'i bul ve g√ºncelle
                        for eid, event in self.violation_history.items():
                            if (event['person_id'] == person_id and 
                                event['violation_type'] == violation_type and
                                event['status'] == 'active'):
                                event['end_time'] = current_time
                                event['end_timestamp'] = datetime.fromtimestamp(current_time).isoformat()
                                event['duration_seconds'] = int(duration)
                                event['status'] = 'auto_resolved'
                                break
                        
                        del person_violations[violation_type]
                        cleanup_count += 1
                
                # Ki≈üinin hi√ß ihlali kalmadƒ±ysa sil
                if not person_violations:
                    del self.active_violations[camera_id][person_id]
            
            # Kamerada hi√ß aktif ihlal kalmadƒ±ysa sil
            if not self.active_violations[camera_id]:
                del self.active_violations[camera_id]
        
        if cleanup_count > 0:
            logger.debug(f"üßπ Cleaned up {cleanup_count} stale violations")
    
    def _calculate_severity(self, violation_type: str) -> str:
        """ƒ∞hlal ≈üiddetini hesapla"""
        critical_violations = ['no_helmet']
        warning_violations = ['no_vest', 'no_shoes']
        
        if violation_type in critical_violations:
            return 'critical'
        elif violation_type in warning_violations:
            return 'warning'
        else:
            return 'info'
    
    def get_active_violations(self, camera_id: Optional[str] = None) -> List[Dict]:
        """
        Aktif ihlalleri getir
        
        Args:
            camera_id: Belirli bir kamera i√ßin (None ise t√ºm√º)
            
        Returns:
            Aktif ihlal listesi
        """
        active = []
        
        if camera_id:
            # Belirli kamera
            if camera_id in self.active_violations:
                for person_id, violations in self.active_violations[camera_id].items():
                    for violation_type, start_time in violations.items():
                        # Event'i bul
                        for event in self.violation_history.values():
                            if (event['person_id'] == person_id and
                                event['violation_type'] == violation_type and
                                event['status'] == 'active'):
                                active.append(event)
                                break
        else:
            # T√ºm kameralar
            for event in self.violation_history.values():
                if event['status'] == 'active':
                    active.append(event)
        
        return active
    
    def get_violation_stats(self, camera_id: str, hours: int = 24) -> Dict:
        """
        ƒ∞hlal istatistiklerini getir
        
        Args:
            camera_id: Kamera ID
            hours: Son ka√ß saat
            
        Returns:
            ƒ∞statistik dict
        """
        cutoff_time = time.time() - (hours * 3600)
        
        total_violations = 0
        by_type = defaultdict(int)
        by_severity = defaultdict(int)
        total_duration = 0
        
        for event in self.violation_history.values():
            if event['camera_id'] == camera_id and event['start_time'] >= cutoff_time:
                total_violations += 1
                by_type[event['violation_type']] += 1
                by_severity[event['severity']] += 1
                
                if 'duration_seconds' in event:
                    total_duration += event['duration_seconds']
        
        return {
            'total_violations': total_violations,
            'by_type': dict(by_type),
            'by_severity': dict(by_severity),
            'total_duration_seconds': total_duration,
            'avg_duration_seconds': total_duration / max(total_violations, 1)
        }


# Global instance
_violation_tracker = None


def get_violation_tracker() -> ViolationTracker:
    """Global violation tracker instance'ƒ± al"""
    global _violation_tracker
    if _violation_tracker is None:
        _violation_tracker = ViolationTracker(cooldown_period=60)
    return _violation_tracker
